% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/condDDP.R
\name{condDDP}
\alias{condDDP}
\title{Estimate an univariate Dependent Dirichlet process mixture model with Gaussian kernel using the
conditional Polya urn scheme}
\usage{
condDDP(data, group, grid = NULL, niter, nburn, m0 = NULL, k0 = NULL,
  a0 = NULL, b0 = NULL, mass = 1, wei = 0.5, napprox = 10,
  n_approx_unif = 1000, nupd = 1000, out_dens = TRUE,
  print_message = TRUE, light_dens = FALSE)
}
\arguments{
\item{data}{A dataset (vector).}

\item{group}{group for the observed data, same dimension as data.}

\item{grid}{A grid to evaluate the estimated density (vector).}

\item{niter}{Number of iterations to estimate the model.}

\item{nburn}{Number of burn-in iterations.}

\item{m0}{Mean of the distribution of location component of the base measure.}

\item{k0}{Tuning parameter of the location component variance of the base measure.}

\item{a0}{Shap parameter of the scale component distribution of the base measure.}

\item{b0}{Rate parameter of the scale component distribution of the base measure.}

\item{mass}{Mass parameter of the Dirichlet process.}

\item{wei}{weigth of the group process.}

\item{napprox}{Number of approximating value for the conditioning distribution via "CPU" method, default 100.}

\item{n_approx_unif}{number of values used in the importance sampling step for the multivariate beta distribution.}

\item{nupd}{How frequently show the curren state of the estimation (number of iterations) - default 1000.}

\item{out_dens}{If TRUE, save the parameters for each iteration, default TRUE}

\item{print_message}{Print the status of the estimation}
}
\value{
A modCond class object contain the estimated density for each iterations, the allocations for each iterations. If out_param is TRUE, also the parameters.
}
\description{
Estimate an univariate Dependent Dirichlet process mixture model with Gaussian kernel using the
conditional Polya urn scheme
}
\examples{
set.seed(42)
data_toy <- c(rnorm(50, -4, 1), rnorm(100, 0, 1), rnorm(50, 4, 1))
group_toy <- c(rep(1,100), rep(2,100))
grid <- seq(-7, 7, length.out = 50)
est_model <- condDDP(data = data_toy, group = group_toy, grid = grid, niter = 10000,
                     nburn = 1000, napprox = 100, a0 = 4)
plot(est_model)

}
